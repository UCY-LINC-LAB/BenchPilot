<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on BenchPilot</title>
    <link>https://ucy-linc-lab.github.io/BenchPilot/docs/</link>
    <description>Recent content in Docs on BenchPilot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://ucy-linc-lab.github.io/BenchPilot/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started</title>
      <link>https://ucy-linc-lab.github.io/BenchPilot/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ucy-linc-lab.github.io/BenchPilot/docs/getting-started/</guid>
      <description>BenchPilot #  BenchPilot: Repeatable &amp;amp; Reproducible Benchmarking for Edge Micro-DCs
BenchPilot is a modular and highly customizable benchmarking framework for edge micro-DCs. BenchPilot provides a high-level declarative model for describing experiment testbeds and scenarios that automates the benchmarking process on Streaming Distributed Processing Engines (SDPEs). The latter enables users to focus on performance analysis instead of dealing with the complex and time-consuming setup. BenchPilot instantiates the underlying cluster, performs repeatable experimentation, and provides a unified monitoring stack in heterogeneous Micro-DCs.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://ucy-linc-lab.github.io/BenchPilot/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ucy-linc-lab.github.io/BenchPilot/docs/installation/</guid>
      <description>GitHub Repository #  Visit our Github Repository  to download or fork BenchPilot!
DockerHub #  All of our Docker images are uploaded on our DockerHub Repository!
BenchPilot Bootstrapping #  Install Docker &amp;amp; Docker Compose #  In the &amp;lsquo;Getting Started&amp;rsquo; section we learned how BenchPilot is structured. In order to use the BenchPilot client you need to have installed docker &amp;amp; docker-compose. In our GitHub Repository, under the /utils folder we have prepared for you a script to automatically download it, so all you need to run is &amp;ldquo;sh install-docker.</description>
    </item>
    
    <item>
      <title>Experiments</title>
      <link>https://ucy-linc-lab.github.io/BenchPilot/docs/experiments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ucy-linc-lab.github.io/BenchPilot/docs/experiments/</guid>
      <description>Experiments #  Before starting the benchmarking process, you need to define (i) the cluster under test, and (ii) the experiments you want to perform.
Defining your Cluster #  By defining you cluster, Benchpilot removes the effort of you needing to download docker, docker compose and every docker image you may need for your benchmarking on your worker devices. All you need to do is define your cluster inside the /BenchPilotSDK/conf/bench-cluster.</description>
    </item>
    
    <item>
      <title>Workloads</title>
      <link>https://ucy-linc-lab.github.io/BenchPilot/docs/workloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ucy-linc-lab.github.io/BenchPilot/docs/workloads/</guid>
      <description>Workloads #  As for now BenchPilot only supports the following containerized workloads:
   Name Description Specific Configuration Parameters     marketing-campaign A streaming distributed workload that features an application as a data processing pipeline with multiple and diverse steps that emulate insight extraction from marketing campaigns. The workload utilizes technologies such as Kafka and Redis. campaigns, which is the number of campaigns, the default number is 1000, tuples_per_second, the number of emitted tuples per second, the default is 10000 kafka_event_count, the number of generated and published events on kafka, the default is 1000000 maximize_data, this attribute is used to automatically maximize the data that are critically affecting the workload&amp;rsquo;s performance, the input that the user can put is in the format of x10, x100, etc.</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>https://ucy-linc-lab.github.io/BenchPilot/docs/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ucy-linc-lab.github.io/BenchPilot/docs/monitoring/</guid>
      <description>BenchPilot Monitoring System #  BenchPilot Monitoring divides its services on the Control Plane, where BenchPilot Client and core monitoring services will run on, and its workers, where the benchmarking will happen.
On the Control Plane, BenchPilot reuses the following existing projects:
 Consul, for service registration Prometheus, for keeping metrics Influxdb, for long-term storing metrics  On each Worker device, BenchPilot uses Netdata for capturing its metrics, and meross smart plugs for retrieving energy consumption.</description>
    </item>
    
    <item>
      <title>Post-Experiment Analysis</title>
      <link>https://ucy-linc-lab.github.io/BenchPilot/docs/experiment-analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ucy-linc-lab.github.io/BenchPilot/docs/experiment-analysis/</guid>
      <description>Post-Experiment Analysis #  After running all of our experiments, it&amp;rsquo;s time to view our results!
Jupyter #  For your ease of accessing and processing the results, we used Jupyter Notebook.
Prometheus Client #  We have created under /utils package a prometheus client. You can always retrieve your experiment results by calling the &amp;ldquo;get_benchmark_results&amp;rdquo; method, or export them in a csv format with the &amp;ldquo;xport_results_to_csv&amp;rdquo; method.
Please remember to use the methods &amp;ldquo;assign_prometheus_prefix&amp;rdquo; and &amp;ldquo;assign_prometheus_suffix&amp;rdquo; in order to assign your prometheus&amp;rsquo; prefixes and suffixes.</description>
    </item>
    
    <item>
      <title>Exteding BenchPilot</title>
      <link>https://ucy-linc-lab.github.io/BenchPilot/docs/exteding-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ucy-linc-lab.github.io/BenchPilot/docs/exteding-framework/</guid>
      <description>Extending BenchPilot #  This section describes all of the steps you need to take in order to extend BenchPilot for supporting more workloads!
Dockerize Workload #  The first step to extend BenchPiot, is to create the necessary docker images. In general BenchPilot utilizes the idea of having a controller node (which BenchPilot&amp;rsquo;s client and other core services will reside on), and the workers, which will be the system under test.</description>
    </item>
    
  </channel>
</rss>
